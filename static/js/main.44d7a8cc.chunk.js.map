{"version":3,"sources":["components/GameStart.js","components/Letter.js","components/WordGuess.js","components/GuessLetter.js","components/ErrorsCounter.js","components/GameOver.js","components/GameWin.js","App.js","serviceWorker.js","index.js"],"names":["GameStart","props","react_default","a","createElement","className","type","onChange","e","wordHandle","ref","startInputRef","onClick","startGameHandle","Letter","letter","show","over","WordGuess","letters","word","map","indexOf","src_components_Letter","key","Math","random","GuessLetter","disabled","inputRef","clicked","ErrorsCounter","errNum","GameOver","GameWin","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","gameRunning","guessingWord","guessedLetters","shownLetters","gameOver","maxErrors","gameWin","gameStart","current","value","setState","findHowManyLetters","counter","i","length","guessClickHandler","toLowerCase","prevState","concat","toConsumableArray","guessingWordChangeHandle","target","split","gameOverHandler","React","createRef","components_GameStart","guessLetter","components_GuessLetter","gOver","components_GameOver","gWin","components_GameWin","components_WordGuess","components_ErrorsCounter","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.44d7a8cc.chunk.js","sourcesContent":["import React from 'react';\n\nconst GameStart = (props) => {\n    return (\n        <div className=\"gameStart\">\n            <input type=\"text\" onChange={(e) => props.wordHandle(e)} ref={props.startInputRef} />\n            <button type=\"button\" onClick={props.startGameHandle}>START</button>\n        </div>\n    );\n};\n\nexport default GameStart;\n","import React from 'react';\nimport './Letter.css';\n\nconst Letter = props => {\n\n    let letter = <div className=\"letterHolder\">?</div>;\n\n    if (props.show === true || props.over ) {\n        letter = <div className=\"letterHolder\">{props.letter}</div>;\n    }\n\n    return letter;\n};\n\nexport default Letter;\n","import React from 'react';\nimport Letter from './Letter';\n\nconst WordGuess = props => {\n\n    let letters = props.word.map((letter) => {\n        const show = props.letters.indexOf(letter) !== -1 ? true : false;\n        return <Letter key={Math.random()} letter={letter} show={show} over={props.over}/>\n    });\n\n    return <div>{letters}</div>;\n};\n\nexport default WordGuess;\n","import React from 'react';\n\nconst GuessLetter = props => {\n    return (\n        <div className=\"guessLetter\">\n            <input disabled={props.over} type=\"text\" ref={props.inputRef}/>\n            <button onClick={props.clicked}>Try</button>\n        </div>\n    );\n};\n\nexport default GuessLetter;\n","import React from 'react';\n\nconst ErrorsCounter = props => {\n\n    return (\n    <div className=\"errors\">ERROR #: {props.errNum}</div>\n    );\n\n};\n\nexport default ErrorsCounter;\n","import React from 'react';\n\nconst GameOver = (props) => (\n    <div className=\"gameOver\">\n    <h1>YOU ARE DEAD!</h1>\n    <button onClick={props.clicked}>Try Again</button>\n    </div>\n);\n\nexport default GameOver;\n","import React from 'react';\n\nconst GameWin = props => {\n    return (\n        <div className=\"win\">\n            <h1>You Won!</h1>\n            <button onClick={props.clicked}>Try Again</button>\n        </div>\n    );\n};\n\nexport default GameWin;\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport GameStart from './components/GameStart';\nimport WordGuess from './components/WordGuess';\nimport GuessLetter from './components/GuessLetter';\nimport ErrorsCounter from './components/ErrorsCounter';\nimport GameOver from './components/GameOver';\nimport GameWin from './components/GameWin';\n\nclass App extends Component {\n\n  state = {\n      gameRunning : false,\n      guessingWord: [],\n      guessedLetters: [],\n      errNum: 0,\n      shownLetters: 0,\n      gameOver: false,\n      maxErrors: 4,\n      gameWin: false\n  };\n\n  constructor(props) {\n      super(props);\n      this.inputRef = React.createRef();\n      this.startInputRef = React.createRef();\n  }\n\n\n  gameStart = () => {\n\n    if (this.startInputRef.current.value !== '') {\n        this.setState({\n            gameRunning: true\n        });\n    }\n  };\n\n\n  findHowManyLetters = (letter) => {\n      let counter = 0;\n\n      for (let i=0; i < this.state.guessingWord.length; i++) {\n\n          if (this.state.guessingWord[i] === letter) {\n              counter += 1;\n          }\n      }\n\n      return counter;\n  };\n\n\n  guessClickHandler = () => {\n\n      const letter = this.inputRef.current.value.toLowerCase();\n      let errNum = this.state.errNum;\n      let gameOver = this.state.gameOver;\n      let shownLetters = this.state.shownLetters;\n      let gameWin = this.state.gameWin;\n\n\n      this.inputRef.current.value = '';\n\n      // check if it is wrong letter\n      if (this.state.guessingWord.indexOf(letter) === -1)  {\n          errNum += 1;\n\n          if (this.state.errNum >= this.state.maxErrors) {\n              gameOver = true;\n          }\n      } else {\n\n          shownLetters += this.findHowManyLetters(letter);\n      }\n\n      if (this.state.gameRunning && (this.state.guessingWord.length <=  shownLetters )) {\n          gameWin = true;\n      }\n\n\n      this.setState(prevState => ({\n          guessedLetters: [...prevState.guessedLetters, letter],\n          shownLetters,\n          errNum,\n          gameOver,\n          gameWin,\n      }));\n\n  };\n\n\n  guessingWordChangeHandle = (e) => {\n      this.setState({guessingWord: e.target.value.split('')});\n  };\n\n\n  gameOverHandler = () => {\n      this.setState({\n          gameOver: false,\n          gameRunning : false,\n          guessingWord: [],\n          guessedLetters: [],\n          errNum: 0,\n          shownLetters: 0,\n          gameWin: false\n      });\n  };\n\n  render() {\n\n    const gameStart = !this.state.gameRunning ? <GameStart startInputRef={this.startInputRef} startGameHandle={this.gameStart} wordHandle={this.guessingWordChangeHandle}/> : false;\n\n    const guessLetter = ( this.state.gameRunning && !this.state.gameOver && !this.state.gameWin ) ? <GuessLetter over={this.state.gameOver} inputRef={this.inputRef} clicked={this.guessClickHandler}/> : null;\n\n    const gOver = this.state.gameOver ? <GameOver clicked={this.gameOverHandler}/> : null;\n\n    const gWin = this.state.gameWin ? <GameWin clicked={this.gameOverHandler}/> : null;\n\n    const over = ( this.state.gameOver === true ) || (this.state.gameRunning === false);\n\n    return (\n      <div className=\"App\">\n          <h1>The Hanging Game</h1>\n          {gameStart}\n          {guessLetter}\n          <WordGuess over={over} letters={this.state.guessedLetters} word={this.state.guessingWord} />\n          {gOver}\n          {gWin}\n          <ErrorsCounter errNum={this.state.errNum}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}